// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: redirect.sql

package db

import (
	"context"
)

const createRedirect = `-- name: CreateRedirect :one
INSERT INTO redirects (
    active_link, history_link
) VALUES (
             $1, $2
         )
RETURNING id, active_link, history_link
`

type CreateRedirectParams struct {
	ActiveLink  string `json:"active_link"`
	HistoryLink string `json:"history_link"`
}

func (q *Queries) CreateRedirect(ctx context.Context, arg CreateRedirectParams) (Redirect, error) {
	row := q.db.QueryRowContext(ctx, createRedirect, arg.ActiveLink, arg.HistoryLink)
	var i Redirect
	err := row.Scan(&i.ID, &i.ActiveLink, &i.HistoryLink)
	return i, err
}

const deleteRedirect = `-- name: DeleteRedirect :one
DELETE FROM redirects
WHERE id = $1
RETURNING id, active_link, history_link
`

func (q *Queries) DeleteRedirect(ctx context.Context, id int64) (Redirect, error) {
	row := q.db.QueryRowContext(ctx, deleteRedirect, id)
	var i Redirect
	err := row.Scan(&i.ID, &i.ActiveLink, &i.HistoryLink)
	return i, err
}

const getRedirect = `-- name: GetRedirect :one
SELECT id, active_link, history_link FROM redirects
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRedirect(ctx context.Context, id int64) (Redirect, error) {
	row := q.db.QueryRowContext(ctx, getRedirect, id)
	var i Redirect
	err := row.Scan(&i.ID, &i.ActiveLink, &i.HistoryLink)
	return i, err
}

const getRedirectByActiveLink = `-- name: GetRedirectByActiveLink :one
SELECT active_link FROM redirects WHERE active_link = $1
`

func (q *Queries) GetRedirectByActiveLink(ctx context.Context, activeLink string) (string, error) {
	row := q.db.QueryRowContext(ctx, getRedirectByActiveLink, activeLink)
	var active_link string
	err := row.Scan(&active_link)
	return active_link, err
}

const getRedirectByHistoryLink = `-- name: GetRedirectByHistoryLink :one
SELECT active_link FROM redirects WHERE history_link = $1
`

func (q *Queries) GetRedirectByHistoryLink(ctx context.Context, historyLink string) (string, error) {
	row := q.db.QueryRowContext(ctx, getRedirectByHistoryLink, historyLink)
	var active_link string
	err := row.Scan(&active_link)
	return active_link, err
}

const listRedirects = `-- name: ListRedirects :many
SELECT id, active_link, history_link FROM redirects
ORDER BY id
LIMIT $1
    OFFSET $2
`

type ListRedirectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRedirects(ctx context.Context, arg ListRedirectsParams) ([]Redirect, error) {
	rows, err := q.db.QueryContext(ctx, listRedirects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Redirect{}
	for rows.Next() {
		var i Redirect
		if err := rows.Scan(&i.ID, &i.ActiveLink, &i.HistoryLink); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRedirect = `-- name: UpdateRedirect :one
UPDATE redirects
set active_link = $2, history_link = $3
WHERE id = $1
RETURNING id, active_link, history_link
`

type UpdateRedirectParams struct {
	ID          int64  `json:"id"`
	ActiveLink  string `json:"active_link"`
	HistoryLink string `json:"history_link"`
}

func (q *Queries) UpdateRedirect(ctx context.Context, arg UpdateRedirectParams) (Redirect, error) {
	row := q.db.QueryRowContext(ctx, updateRedirect, arg.ID, arg.ActiveLink, arg.HistoryLink)
	var i Redirect
	err := row.Scan(&i.ID, &i.ActiveLink, &i.HistoryLink)
	return i, err
}
